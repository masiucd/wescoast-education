(()=>{"use strict";var t,e=function(){function t(t,e,n,s){this.id=t,this.subject=e,this.students=n,this.teacher=s}return t.prototype.addStudent=function(t){this.students.push(t),t.courses.push(this)},t.prototype.removeStudent=function(t){this.students=this.students.filter((function(e){return e.id!==t}))},t.prototype.getStudent=function(t){var e=this.students.find((function(e){return e.id===t}));return e&&e},t.prototype.updateStudent=function(t){},t}(),n=function(t,e,n){this.id=t,this.firstName=e,this.lastName=n},s=(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},function(e,n){function s(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(s.prototype=n.prototype,new s)}),i=function(t){function e(e,n,s,i){var r=t.call(this,e,n,s)||this;return r.subjects=i,r}return s(e,t),e}(n),r=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function s(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(s.prototype=n.prototype,new s)}}(),o=function(t){function e(e,n,s,i){var r=t.call(this,e,n,s)||this;return r.courses=i,r}return r(e,t),e}(n),u=function(){function t(t,e,n){this.students=t,this.courses=e,this.teachers=n,this.main=this.getElement("#root"),this.wrapper=this.createElement("div","wrapper"),this.title=this.createElement("h1","main-title"),this.title.textContent="WesCoast",this.modalButton=this.createElement("button","modal-btn"),this.modalButton.textContent="show data",this.coursesList=this.createElement("ul","courses-list"),this.studentList=this.createElement("ul","students-list"),this.teachersList=this.createElement("ul","teachaers-list"),this.coursesList.classList.add("hide"),this.teachersList.classList.add("hide"),this.studentList.classList.add("hide"),this.wrapper.append(this.title,this.modalButton,this.coursesList,this.studentList,this.teachersList),this.main.append(this.wrapper)}return t.prototype.createElement=function(t,e){void 0===e&&(e="");var n=document.createElement(t);return e&&n.classList.add(e),n},t.prototype.getElement=function(t){return document.querySelector(t)},t.prototype.renderStudents=function(){return this.students.map((function(t){return"\n        <li>"+t.firstName+"-"+t.lastName+"</li>\n        <p>"+t.firstName+" currently study:</p>\n        "+t.courses.map((function(t){return"<li>"+t.subject+"</li>"})).join("")+"\n      "})).join("")},t.prototype.renderTeachers=function(){return this.teachers.map((function(t){return"\n        <li>"+t.firstName+"-"+t.lastName+"</li>\n      "})).join("")},t.prototype.renderCourses=function(){return this.courses.map((function(t){return'\n        <li class="course">'+t.subject+"</li>\n        <p>Students that read "+t.subject+"</p>\n        "+t.students.map((function(t){return"<li>"+t.firstName+"- "+t.lastName+" </li>"})).join("")+"\n      "})).join("")},t.prototype.render=function(){var t=this;this.studentList.innerHTML="\n      <li> <strong> Student List </strong> </li>\n      "+this.renderStudents()+"\n    ",this.teachersList.innerHTML="\n      <li> <strong>Teachers List</strong> </li>\n      "+this.renderTeachers()+"\n    ",this.coursesList.innerHTML="\n      <li> <strong>Courses List</strong> </li>\n      "+this.renderCourses()+"\n    ",this.modalButton.addEventListener("click",(function(){t.studentList.classList.toggle("show"),t.coursesList.classList.toggle("show"),t.teachersList.classList.toggle("show")}))},t}();let a=(t=21)=>{let e="",n=crypto.getRandomValues(new Uint8Array(t));for(;t--;){let s=63&n[t];e+=s<36?s.toString(36):s<62?(s-26).toString(36).toUpperCase():s<63?"_":"-"}return e};(function(){var t=new o(a(),"Mike","Szymkowiak",[]),n=new o(a(),"Jon","Smith",[]),s=new o(a(),"Clara","Sten",[]),r=new o(a(),"Kim","Kallstrom",[]),c=new o(a(),"Stina","Turner",[]),h=new i(a(),"Boris","Einstein",[]),d=new i(a(),"Linda","Smith",[]),l=new i(a(),"Mia","Jonson",[]),p=new e(a(),"math",[],h),f=new e(a(),"english",[],h),m=new e(a(),"swedish",[],h);p.addStudent(t),p.addStudent(n),f.addStudent(s),f.addStudent(c),m.addStudent(r),m.addStudent(c);var y=[t,n,s],L=[h,d,l],w=[p,f,m];return{init:function(){new u(y,w,L).render()}}})().init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,