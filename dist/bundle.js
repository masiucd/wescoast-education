(()=>{"use strict";var t,e=function(){return(e=Object.assign||function(t){for(var e,n=1,s=arguments.length;n<s;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},n=function(){function t(t,e,n,s){var i=this;this.id=t,this.subject=e,this.students=n,this.teacher=s,this.teacher.subjects.push(this.subject),this.students.forEach((function(t){t.courses.push(i),console.log(i),console.log(t)}))}return t.prototype.removeStudent=function(t){this.students=this.students.filter((function(e){return e.id!==t}))},t.prototype.getStudent=function(t){var e=this.students.find((function(e){return e.id===t}));return e&&e},t.prototype.updateStudent=function(t){if(!this.getStudent(t.id))throw new Error("no user found with id "+t.id);this.students=this.students.map((function(n){return n.id===t.id?e(e({},n),{firstName:t.firstName?t.firstName:n.firstName,lastName:t.lastName?t.lastName:n.lastName}):n}))},t.prototype.addStudent=function(t){this.students.push(t),t.courses.push(this)},t}(),s=function(t,e,n){this.id=t,this.firstName=e,this.lastName=n},i=(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},function(e,n){function s(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(s.prototype=n.prototype,new s)}),r=function(t){function e(e,n,s,i){var r=t.call(this,e,n,s)||this;return r.subjects=i,r}return i(e,t),e}(s),o=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function s(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(s.prototype=n.prototype,new s)}}(),u=function(t){function e(e,n,s,i){var r=t.call(this,e,n,s)||this;return r.courses=i,r}return o(e,t),e}(s),a=function(){function t(t,e,n){this.students=t,this.courses=e,this.teachers=n,this.main=this.getElement("#root"),this.wrapper=this.createElement("div","wrapper"),this.title=this.createElement("h1","main-title"),this.title.textContent="WesCoast",this.showDataButton=this.createElement("button","show-data-btn"),this.showDataButton.textContent="show data",this.coursesList=this.createElement("ul","courses-list"),this.studentList=this.createElement("ul","students-list"),this.teachersList=this.createElement("ul","teachers-list"),this.coursesList.classList.add("hide"),this.teachersList.classList.add("hide"),this.studentList.classList.add("hide"),this.wrapper.append(this.title,this.showDataButton,this.coursesList,this.studentList,this.teachersList),this.main.append(this.wrapper)}return t.prototype.createElement=function(t,e){void 0===e&&(e="");var n=document.createElement(t);return e&&n.classList.add(e),n},t.prototype.getElement=function(t){return document.querySelector(t)},t.prototype.renderStudents=function(){return this.students.map((function(t){return'\n        <li class="student">'+t.firstName+"-"+t.lastName+"</li>\n        <p>"+t.firstName+" currently study:</p>\n        "+t.courses.map((function(t){return"<li>"+t.subject+"</li>"})).join("")+"\n      "})).join("")},t.prototype.renderTeachers=function(){return this.teachers.map((function(t){return'\n        <li class="teacher">'+t.firstName+"-"+t.lastName+"</li>\n        <p>"+t.firstName+" main subjects:</p>\n        "+t.subjects.map((function(t){return'<li class="subject">'+t+"</li> "})).join("")+"\n      "})).join("")},t.prototype.renderCourses=function(){return this.courses.map((function(t){return"\n        <p>Students that study "+t.subject+"</p>\n        "+t.students.map((function(t){return"<li>"+t.firstName+"- "+t.lastName+" </li>"})).join("")+"\n      "})).join("")},t.prototype.render=function(){var t,e=this;this.studentList.innerHTML='\n      <li class="title"> <strong> Student List </strong> </li>\n      '+this.renderStudents()+"\n    ",this.teachersList.innerHTML='\n    <li class="title"> <strong>Teachers List</strong> </li>\n      '+this.renderTeachers()+"\n    ",this.coursesList.innerHTML='\n    <li class="title course-title"> <button>Courses List</button> </li>\n    ',this.showDataButton.addEventListener("click",(function(){e.studentList.classList.toggle("show"),e.coursesList.classList.toggle("show"),e.teachersList.classList.toggle("show")})),null===(t=this.coursesList.firstElementChild)||void 0===t||t.addEventListener("click",(function(){var t=e.getElement(".modal");t.classList.add("show-modal"),t.innerHTML='\n        <ul class="modal-body">\n          '+e.renderCourses()+'\n          <button id="close-modal">X</button>          \n        </ul>\n      ';var n=e.getElement("#close-modal");null==n||n.addEventListener("click",(function(){t.classList.remove("show-modal")}))}))},t}();let c=(t=21)=>{let e="",n=crypto.getRandomValues(new Uint8Array(t));for(;t--;){let s=63&n[t];e+=s<36?s.toString(36):s<62?(s-26).toString(36).toUpperCase():s<63?"_":"-"}return e};(function(){var t=new u(c(),"Mike","Szymkowiak",[]),e=new u(c(),"Jon","Smith",[]),s=new u(c(),"Clara","Sten",[]),i=new u(c(),"Kim","Kallstrom",[]),o=new u(c(),"Stina","Turner",[]),l=new r(c(),"Boris","Einstein",[]),d=new r(c(),"Linda","Smith",[]),h=new r(c(),"Mia","Jonson",[]),p=new n(c(),"math",[],l),f=new n(c(),"english",[],d),m=new n(c(),"swedish",[],h),w=new n(c(),"history",[],l);p.addStudent(t),p.addStudent(e),f.addStudent(s),f.addStudent(o),w.addStudent(t),w.addStudent(o),m.addStudent(i),m.addStudent(o);var y=[t,e,s,i,o],L=[l,d,h],S=[p,f,m,w];return{init:function(){new a(y,S,L).render()}}})().init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,