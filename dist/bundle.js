(()=>{var t={496:(t,e,n)=>{let{urlAlphabet:o}=n(208),r=t=>crypto.getRandomValues(new Uint8Array(t)),i=(t,e,n)=>{let o=(2<<Math.log(t.length-1)/Math.LN2)-1,r=-~(1.6*o*e/t.length);return()=>{let i="";for(;;){let a=n(r),s=r;for(;s--;)if(i+=t[a[s]&o]||"",i.length===e)return i}}};t.exports={nanoid:(t=21)=>{let e="",n=crypto.getRandomValues(new Uint8Array(t));for(;t--;){let o=63&n[t];e+=o<36?o.toString(36):o<62?(o-26).toString(36).toUpperCase():o<63?"_":"-"}return e},customAlphabet:(t,e)=>i(t,e,r),customRandom:i,urlAlphabet:o,random:r}},208:t=>{t.exports={urlAlphabet:"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"}}},e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={exports:{}};return t[o](r,r.exports,n),r.exports}(()=>{"use strict";var t,e=function(){function t(t,e,n,o){this.rootElement=t,this.displayData=e,this.mainTitle=n,this.titles=o}return t.prototype.handleClick=function(t){},t.prototype.render=function(){var t='\n      <table class="list-wrapper">\n        <thead>\n          '+this.titles.map((function(t){return"<th>"+t+"</th>"})).join("")+'\n        </thead>\n          <tbody class="list list-'+this.mainTitle+'">\n              \n              \n          </tbody>\n      </table>\n    ';this.rootElement.insertAdjacentHTML("beforeend",t)},t}(),o=n(496),r=(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}),i=function(t){function e(e,n,o,r,i){var a=t.call(this,e,n,o,r,i)||this;return a.subjects=[],a}return r(e,t),e}((function(t,e,n,o,r){this.id=t,this.firstName=e,this.lastName=n,this.email=o,this.age=r}));const a=[new i((0,o.nanoid)(),"Frank","Smith","frank@io.com",43),new i((0,o.nanoid)(),"Logan","Jonsson","logan@io.com",47),new i((0,o.nanoid)(),"Mia","Greger","mia@io.com",41),new i((0,o.nanoid)(),"Boris","Rooney","frank@io.com",53)];new(function(){function t(t){this.rootElement=t,this.teachersList=new e(this.rootElement,a,"Teachers",["firstName","LastName","age"])}return t.prototype.renderTeachers=function(){this.teachersList.render()},t.prototype.init=function(){this.renderTeachers()},t}())(document.getElementById("teachers")).init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,