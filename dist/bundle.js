(()=>{"use strict";var t,e,n=function(t){var e=t.id,n=t.firstName,i=t.lastName,a=t.email,o=t.age,r=t.type;return{id:e,firstName:n,lastName:i,email:a,age:o,type:r,showCase:function(){return{name:n+" "+i,email:a,age:""+o}}}},i=[n({id:1,firstName:"mark",lastName:"smith",email:"mark@io.com",age:37,type:"t"}),n({id:2,firstName:"george",lastName:"pierre",email:"pierre@io.com",age:48,type:"t"}),n({id:3,firstName:"carl",lastName:"carl",email:"carl@io.com",age:36,type:"t"}),n({id:4,firstName:"bob",lastName:"rooney",email:"bob@io.com",age:31,type:"t"})],a=function(t,e,n,i){var a=function(){return'   \n    <div class="table-wrapper wrapper-'+n+'">\n    <table class="'+n+'">\n        <caption>'+n+"</caption>\n        <thead>\n          "+i.map((function(t){return"<th>"+t+"</th>"})).join("")+"\n        </thead>\n        <tbody>\n          "+e.map((function(t){var e=t.showCase();return'\n                <tr data-id="'+t.id+'" id="'+("s"===t.type?"student-"+t.id:"t"===t.type?"teacher-"+t.id:"course-"+t.id)+'">\n                '+Object.keys(e).map((function(t){return'<td data-info="'+e[t]+'">'+e[t]+"</td>"})).join("")+"\n                </tr>\n          "})).join("")+"\n        </tbody>\n      </table>\n    </div>\n    "};return{init:function(){t.innerHTML=a()},rawHtml:a,onClick:function(t){document.querySelectorAll("tr").forEach((function(e){return e.addEventListener("click",(function(){"student"===e.id.split("-")[0]&&t(parseInt(e.dataset.id,10))}))}))}}},o=function(t,e,n,i){return{id:t,title:e,about:n,duration:i,showCase:function(){return{title:e,duration:i}}}},r=[o(1,"french","french class","5h"),o(2,"history","history class","3h"),o(3,"math","math class","4h"),o(4,"english","english class","3h")],s=function(t){var e=t.id,n=t.firstName,i=t.lastName,a=t.email,o=t.age,r=t.type;return{id:e,firstName:n,lastName:i,email:a,age:o,type:r,showCase:function(){return{name:n+" "+i,email:a,age:""+o}}}},c=[s({id:1,firstName:"bob",lastName:"smith",email:"bob@io.com",age:17,type:"s"}),s({id:2,firstName:"joe",lastName:"jonsson",email:"joe@io.com",age:18,type:"s"}),s({id:3,firstName:"philip",lastName:"oconnor",email:"ph@io.com",age:16,type:"s"}),s({id:4,firstName:"anna",lastName:"franklin",email:"anna@io.com",age:21,type:"s"})],m=new(function(){function t(){this.collection={},this.messages=[]}return t.prototype.register=function(t){this.collection[t.name]=t,t.adminMediator=this},t.prototype.send=function(t,e){this.messages.push({message:t,from:e})},t}()),l=function(){function t(t){this.name=t,this.adminMediator=null}return t.prototype.send=function(t){var e;null===(e=this.adminMediator)||void 0===e||e.send(t,this)},t}(),d=function(t,e,n,i,o){var r=a(t,n,i,o);return{init:function(){!function(){var n;t.classList.add("show-modal");var i='\n    <div class="modal-container">\n      '+r.rawHtml()+'\n      <button class="close-modal">\n        ‚ùå\n      </button>\n    </div>\n    ';t.innerHTML=i,null===(n=document.querySelector(".close-modal"))||void 0===n||n.addEventListener("click",(function(){t.classList.remove("show-modal")}));var a=new l(e.firstName);m.register(a);var o=document.querySelectorAll(".modal tbody tr td");Array.from(o).forEach((function(t){var n=t.dataset.info;"english"!==n&&"french"!==n&&"history"!==n&&"math"!==n||t.addEventListener("click",(function(t){a.send("Student "+e.firstName+" "+e.lastName+" has been registered for the course "+n),console.log(m)}))}))}()}}};(function(t){void 0===t&&(t=document.querySelector(".main"));var e=a(t,c,"students",["name","email","age"]),n=function(t){var e=c.find((function(e){return e.id===t})),n=document.querySelector(".modal");d(n,e,r,"courses",["title","duration"]).init()};return{init:function(){e.init(),e.onClick(n)}}})(document.getElementById("students")).init(),(t=document.getElementById("teachers"),e=a(t,i,"teachers",["name","email","age"]),{init:function(){e.init()}}).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,