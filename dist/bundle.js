(()=>{"use strict";var t,e=function(){function t(t,e,n,s){this.id=t,this.subject=e,this.students=n,this.teacher=s,this.teacher.subjects.push(this.subject)}return t.prototype.addStudent=function(t){this.students.push(t),t.courses.push(this)},t.prototype.removeStudent=function(t){this.students=this.students.filter((function(e){return e.id!==t}))},t.prototype.getStudent=function(t){var e=this.students.find((function(e){return e.id===t}));return e&&e},t.prototype.updateStudent=function(t){},t}(),n=function(t,e,n){this.id=t,this.firstName=e,this.lastName=n},s=(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},function(e,n){function s(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(s.prototype=n.prototype,new s)}),i=function(t){function e(e,n,s,i){var r=t.call(this,e,n,s)||this;return r.subjects=i,r}return s(e,t),e}(n),r=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function s(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(s.prototype=n.prototype,new s)}}(),o=function(t){function e(e,n,s,i){var r=t.call(this,e,n,s)||this;return r.courses=i,r}return r(e,t),e}(n),u=function(){function t(t,e,n){this.students=t,this.courses=e,this.teachers=n,this.main=this.getElement("#root"),this.wrapper=this.createElement("div","wrapper"),this.title=this.createElement("h1","main-title"),this.title.textContent="WesCoast",this.modalButton=this.createElement("button","modal-btn"),this.modalButton.textContent="show data",this.modalWrapper=this.createElement("div","modal-wrapper"),this.coursesList=this.createElement("ul","courses-list"),this.studentList=this.createElement("ul","students-list"),this.teachersList=this.createElement("ul","teachaers-list"),this.coursesList.classList.add("hide"),this.teachersList.classList.add("hide"),this.studentList.classList.add("hide"),this.wrapper.append(this.title,this.modalButton,this.coursesList,this.studentList,this.teachersList),this.main.append(this.wrapper)}return t.prototype.createElement=function(t,e){void 0===e&&(e="");var n=document.createElement(t);return e&&n.classList.add(e),n},t.prototype.getElement=function(t){return document.querySelector(t)},t.prototype.renderStudents=function(){return this.students.map((function(t){return'\n        <li class="student">'+t.firstName+"-"+t.lastName+"</li>\n        <p>"+t.firstName+" currently study:</p>\n        "+t.courses.map((function(t){return"<li>"+t.subject+"</li>"})).join("")+"\n      "})).join("")},t.prototype.renderTeachers=function(){return this.teachers.map((function(t){return"\n        <li>"+t.firstName+"-"+t.lastName+"</li>\n      "})).join("")},t.prototype.renderCourses=function(){return this.courses.map((function(t){return'\n        <li class="course">'+t.subject+"</li>\n        <p>Students that read "+t.subject+"</p>\n        "+t.students.map((function(t){return"<li>"+t.firstName+"- "+t.lastName+" </li>"})).join("")+"\n      "})).join("")},t.prototype.render=function(){var t=this;this.studentList.innerHTML='\n      <li class="title"> <strong> Student List </strong> </li>\n      '+this.renderStudents()+"\n    ",this.teachersList.innerHTML='\n    <li class="title"> <strong>Teachers List</strong> </li>\n      '+this.renderTeachers()+"\n    ",this.coursesList.innerHTML='\n    <li class="title"> <strong>Courses List</strong> </li>\n      '+this.renderCourses()+"\n    ",this.modalButton.addEventListener("click",(function(){t.studentList.classList.toggle("show"),t.coursesList.classList.toggle("show"),t.teachersList.classList.toggle("show")}))},t}();let a=(t=21)=>{let e="",n=crypto.getRandomValues(new Uint8Array(t));for(;t--;){let s=63&n[t];e+=s<36?s.toString(36):s<62?(s-26).toString(36).toUpperCase():s<63?"_":"-"}return e};(function(){var t=new o(a(),"Mike","Szymkowiak",[]),n=new o(a(),"Jon","Smith",[]),s=new o(a(),"Clara","Sten",[]),r=new o(a(),"Kim","Kallstrom",[]),c=new o(a(),"Stina","Turner",[]),h=new i(a(),"Boris","Einstein",[]),l=new i(a(),"Linda","Smith",[]),d=new i(a(),"Mia","Jonson",[]),p=new e(a(),"math",[],h),f=new e(a(),"english",[],l),m=new e(a(),"swedish",[],d);new e(a(),"history",[],h),p.addStudent(t),p.addStudent(n),f.addStudent(s),f.addStudent(c),m.addStudent(r),m.addStudent(c);var y=[t,n,s],L=[h,l,d],w=[p,f,m];return console.log("boris",h),{init:function(){new u(y,w,L).render()}}})().init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zY2hvb2wtZGF0YS8uL3NyYy9zY2hvb2wvZGF0YS9Db3Vyc2UudHMiLCJ3ZWJwYWNrOi8vc2Nob29sLWRhdGEvLi9zcmMvc2Nob29sL2RhdGEvUGVyc29uLnRzIiwid2VicGFjazovL3NjaG9vbC1kYXRhLy4vc3JjL3NjaG9vbC9kYXRhL1RlYWNoZXIudHMiLCJ3ZWJwYWNrOi8vc2Nob29sLWRhdGEvLi9zcmMvc2Nob29sL2RhdGEvU3R1ZGVudC50cyIsIndlYnBhY2s6Ly9zY2hvb2wtZGF0YS8uL3NyYy9zY2hvb2wvdmlldy9WaWV3LnRzIiwid2VicGFjazovL3NjaG9vbC1kYXRhLy4vbm9kZV9tb2R1bGVzL25hbm9pZC9pbmRleC5wcm9kLmpzIiwid2VicGFjazovL3NjaG9vbC1kYXRhLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImlkIiwic3ViamVjdCIsInN0dWRlbnRzIiwidGVhY2hlciIsInRoaXMiLCJzdWJqZWN0cyIsInB1c2giLCJhZGRTdHVkZW50Iiwic3R1ZGVudCIsImNvdXJzZXMiLCJyZW1vdmVTdHVkZW50Iiwic3R1ZGVudElEIiwiZmlsdGVyIiwiZ2V0U3R1ZGVudCIsImZpbmQiLCJ1cGRhdGVTdHVkZW50IiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJQZXJzb24iLCJ0ZWFjaGVycyIsIm1haW4iLCJnZXRFbGVtZW50Iiwid3JhcHBlciIsImNyZWF0ZUVsZW1lbnQiLCJ0aXRsZSIsInRleHRDb250ZW50IiwibW9kYWxCdXR0b24iLCJtb2RhbFdyYXBwZXIiLCJjb3Vyc2VzTGlzdCIsInN0dWRlbnRMaXN0IiwidGVhY2hlcnNMaXN0IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kIiwidGFnIiwiY2xhc3NOYW1lIiwiZWxlbWVudCIsImRvY3VtZW50Iiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwicmVuZGVyU3R1ZGVudHMiLCJtYXAiLCJjb3Vyc2UiLCJqb2luIiwicmVuZGVyVGVhY2hlcnMiLCJyZW5kZXJDb3Vyc2VzIiwicmVuZGVyIiwiaW5uZXJIVE1MIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRvZ2dsZSIsIm5hbm9pZCIsInNpemUiLCJieXRlcyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQ4QXJyYXkiLCJieXRlIiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsIm1pa2UiLCJTdHVkZW50Iiwiam9uIiwiY2xhcmEiLCJraW0iLCJzdGluYSIsImJvcmlzIiwiVGVhY2hlciIsImxpbmRhIiwibWlhIiwibWF0aCIsIkNvdXJzZSIsImVuZ2xpc2giLCJzd2VkaXNoIiwiY29uc29sZSIsImxvZyIsImluaXQiLCJWaWV3IiwiY29udHJvbGxlciJdLCJtYXBwaW5ncyI6Im1CQUtBLEksRUFBQSxhQUtFLFdBQVlBLEVBQVlDLEVBQWtCQyxFQUFxQkMsR0FDN0RDLEtBQUtKLEdBQUtBLEVBQ1ZJLEtBQUtILFFBQVVBLEVBQ2ZHLEtBQUtGLFNBQVdBLEVBQ2hCRSxLQUFLRCxRQUFVQSxFQUtmQyxLQUFLRCxRQUFRRSxTQUFTQyxLQUFLRixLQUFLSCxTQW1CcEMsT0FiRSxZQUFBTSxXQUFBLFNBQVdDLEdBQ1RKLEtBQUtGLFNBQVNJLEtBQUtFLEdBQ25CQSxFQUFRQyxRQUFRSCxLQUFLRixPQUd2QixZQUFBTSxjQUFBLFNBQWNDLEdBQ1pQLEtBQUtGLFNBQVdFLEtBQUtGLFNBQVNVLFFBQU8sU0FBQUosR0FBVyxPQUFBQSxFQUFRUixLQUFPVyxNQUVqRSxZQUFBRSxXQUFBLFNBQVdGLEdBQ1QsSUFBTUgsRUFBVUosS0FBS0YsU0FBU1ksTUFBSyxTQUFBTixHQUFXLE9BQUFBLEVBQVFSLEtBQU9XLEtBQzdELE9BQU9ILEdBQVdBLEdBRXBCLFlBQUFPLGNBQUEsU0FBY1AsS0FDaEIsRUFqQ0EsR0NMQSxFQUtFLFNBQVlSLEVBQVlnQixFQUFtQkMsR0FDekNiLEtBQUtKLEdBQUtBLEVBQ1ZJLEtBQUtZLFVBQVlBLEVBQ2pCWixLQUFLYSxTQUFXQSxHLDBVQ0xwQixjQUdFLFdBQVlqQixFQUFZZ0IsRUFBbUJDLEVBQWtCWixHQUE3RCxNQUNFLFlBQU1MLEVBQUlnQixFQUFXQyxJQUFTLEssT0FDOUIsRUFBS1osU0FBV0EsRSxFQUVwQixPQVA2QixPQU83QixFQVBBLENBQTZCYSxHLGlXQ0E3QixjQUdFLFdBQVlsQixFQUFZZ0IsRUFBbUJDLEVBQWtCUixHQUE3RCxNQUNFLFlBQU1ULEVBQUlnQixFQUFXQyxJQUFTLEssT0FDOUIsRUFBS1IsUUFBVUEsRSxFQUVuQixPQVA2QixPQU83QixFQVBBLENBQTZCUyxHQ0M3QixhQWFFLFdBQVloQixFQUFxQk8sRUFBbUJVLEdBQ2xEZixLQUFLRixTQUFXQSxFQUNoQkUsS0FBS0ssUUFBVUEsRUFDZkwsS0FBS2UsU0FBV0EsRUFFaEJmLEtBQUtnQixLQUFPaEIsS0FBS2lCLFdBQVcsU0FDNUJqQixLQUFLa0IsUUFBVWxCLEtBQUttQixjQUFjLE1BQU8sV0FFekNuQixLQUFLb0IsTUFBUXBCLEtBQUttQixjQUFjLEtBQU0sY0FDdENuQixLQUFLb0IsTUFBTUMsWUFBYyxXQUV6QnJCLEtBQUtzQixZQUFjdEIsS0FBS21CLGNBQWMsU0FBVSxhQUNoRG5CLEtBQUtzQixZQUFZRCxZQUFjLFlBQy9CckIsS0FBS3VCLGFBQWV2QixLQUFLbUIsY0FBYyxNQUFPLGlCQUU5Q25CLEtBQUt3QixZQUFjeEIsS0FBS21CLGNBQWMsS0FBTSxnQkFDNUNuQixLQUFLeUIsWUFBY3pCLEtBQUttQixjQUFjLEtBQU0saUJBQzVDbkIsS0FBSzBCLGFBQWUxQixLQUFLbUIsY0FBYyxLQUFNLGtCQUM3Q25CLEtBQUt3QixZQUFZRyxVQUFVQyxJQUFJLFFBQy9CNUIsS0FBSzBCLGFBQWFDLFVBQVVDLElBQUksUUFDaEM1QixLQUFLeUIsWUFBWUUsVUFBVUMsSUFBSSxRQUUvQjVCLEtBQUtrQixRQUFRVyxPQUNYN0IsS0FBS29CLE1BQ0xwQixLQUFLc0IsWUFDTHRCLEtBQUt3QixZQUNMeEIsS0FBS3lCLFlBQ0x6QixLQUFLMEIsY0FHUDFCLEtBQUtnQixLQUFLYSxPQUFPN0IsS0FBS2tCLFNBeUUxQixPQXRFRSxZQUFBQyxjQUFBLFNBQWNXLEVBQWFDLFFBQUEsSUFBQUEsTUFBQSxJQUN6QixJQUFNQyxFQUFVQyxTQUFTZCxjQUFjVyxHQUd2QyxPQUZJQyxHQUFXQyxFQUFRTCxVQUFVQyxJQUFJRyxHQUU5QkMsR0FHVCxZQUFBZixXQUFBLFNBQVdpQixHQUdULE9BRmdCRCxTQUFTRSxjQUFjRCxJQUtqQyxZQUFBRSxlQUFSLFdBQ0UsT0FBT3BDLEtBQUtGLFNBQ1R1QyxLQUNDLFNBQUFqQyxHQUNFLHVDQUNvQkEsRUFBUVEsVUFBUyxJQUFJUixFQUFRUyxTQUFRLHFCQUN0RFQsRUFBUVEsVUFBUyxrQ0FDcEJSLEVBQVFDLFFBQVFnQyxLQUFJLFNBQUNDLEdBQW1CLGFBQU9BLEVBQU96QyxRQUFPLFdBQVMwQyxLQUFLLElBQUcsY0FHakZBLEtBQUssS0FFRixZQUFBQyxlQUFSLFdBQ0UsT0FBT3hDLEtBQUtlLFNBQ1RzQixLQUNDLFNBQUF0QyxHQUNFLHVCQUNJQSxFQUFRYSxVQUFTLElBQUliLEVBQVFjLFNBQVEsbUJBRzVDMEIsS0FBSyxLQUVGLFlBQUFFLGNBQVIsV0FDRSxPQUFPekMsS0FBS0ssUUFDVGdDLEtBQ0MsU0FBQUMsR0FDRSxzQ0FDbUJBLEVBQU96QyxRQUFPLHdDQUNYeUMsRUFBT3pDLFFBQU8saUJBQ3BDeUMsRUFBT3hDLFNBQ051QyxLQUFJLFNBQUNqQyxHQUFxQixhQUFPQSxFQUFRUSxVQUFTLEtBQUtSLEVBQVFTLFNBQVEsWUFDdkUwQixLQUFLLElBQUcsY0FHWkEsS0FBSyxLQUdWLFlBQUFHLE9BQUEsc0JBQ0UxQyxLQUFLeUIsWUFBWWtCLFVBQVksMkVBRXpCM0MsS0FBS29DLGlCQUFnQixTQUd6QnBDLEtBQUswQixhQUFhaUIsVUFBWSx3RUFFMUIzQyxLQUFLd0MsaUJBQWdCLFNBRXpCeEMsS0FBS3dCLFlBQVltQixVQUFZLHVFQUV6QjNDLEtBQUt5QyxnQkFBZSxTQUV4QnpDLEtBQUtzQixZQUFZc0IsaUJBQWlCLFNBQVMsV0FDekMsRUFBS25CLFlBQVlFLFVBQVVrQixPQUFPLFFBQ2xDLEVBQUtyQixZQUFZRyxVQUFVa0IsT0FBTyxRQUNsQyxFQUFLbkIsYUFBYUMsVUFBVWtCLE9BQU8sWUFHekMsRUFwSEEsR0M4QkEsSUE0Q0lDLEVBQVMsQ0FBQ0MsRUFBTyxNQUNuQixJQUFJbkQsRUFBSyxHQUNMb0QsRUFBUUMsT0FBT0MsZ0JBQWdCLElBQUlDLFdBQVdKLElBR2xELEtBQU9BLEtBQVEsQ0FNYixJQUFJSyxFQUFxQixHQUFkSixFQUFNRCxHQUdmbkQsR0FGRXdELEVBQU8sR0FFSEEsRUFBS0MsU0FBUyxJQUNYRCxFQUFPLElBRVRBLEVBQU8sSUFBSUMsU0FBUyxJQUFJQyxjQUN0QkYsRUFBTyxHQUNWLElBRUEsSUFHVixPQUFPeEQsSUMvRlAsV0FDRSxJQUFNMkQsRUFBTyxJQUFJQyxFQUFRVixJQUFVLE9BQVEsYUFBYyxJQUNuRFcsRUFBTSxJQUFJRCxFQUFRVixJQUFVLE1BQU8sUUFBUyxJQUM1Q1ksRUFBUSxJQUFJRixFQUFRVixJQUFVLFFBQVMsT0FBUSxJQUMvQ2EsRUFBTSxJQUFJSCxFQUFRVixJQUFVLE1BQU8sWUFBYSxJQUNoRGMsRUFBUSxJQUFJSixFQUFRVixJQUFVLFFBQVMsU0FBVSxJQUVqRGUsRUFBUSxJQUFJQyxFQUFRaEIsSUFBVSxRQUFTLFdBQVksSUFDbkRpQixFQUFRLElBQUlELEVBQVFoQixJQUFVLFFBQVMsUUFBUyxJQUNoRGtCLEVBQU0sSUFBSUYsRUFBUWhCLElBQVUsTUFBTyxTQUFVLElBRTdDbUIsRUFBTyxJQUFJQyxFQUFPcEIsSUFBVSxPQUFRLEdBQUllLEdBQ3hDTSxFQUFVLElBQUlELEVBQU9wQixJQUFVLFVBQVcsR0FBSWlCLEdBQzlDSyxFQUFVLElBQUlGLEVBQU9wQixJQUFVLFVBQVcsR0FBSWtCLEdBQ3BDLElBQUlFLEVBQU9wQixJQUFVLFVBQVcsR0FBSWUsR0FFcERJLEVBQUs5RCxXQUFXb0QsR0FDaEJVLEVBQUs5RCxXQUFXc0QsR0FDaEJVLEVBQVFoRSxXQUFXdUQsR0FDbkJTLEVBQVFoRSxXQUFXeUQsR0FDbkJRLEVBQVFqRSxXQUFXd0QsR0FDbkJTLEVBQVFqRSxXQUFXeUQsR0FFbkIsSUFBTTlELEVBQVcsQ0FBQ3lELEVBQU1FLEVBQUtDLEdBQ3ZCM0MsRUFBVyxDQUFDOEMsRUFBT0UsRUFBT0MsR0FDMUIzRCxFQUFVLENBQUM0RCxFQUFNRSxFQUFTQyxHQVFoQyxPQURBQyxRQUFRQyxJQUFJLFFBQVNULEdBQ2QsQ0FDTFUsS0FQVyxXQUNELElBQUlDLEVBQUsxRSxFQUFVTyxFQUFTVSxHQUNwQzJCLFlBUU4rQixHQUFhRixRIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5hbm9pZCB9IGZyb20gXCJuYW5vaWRcIlxuaW1wb3J0IHsgVGVhY2hlciB9IGZyb20gXCIuL1RlYWNoZXJcIlxuaW1wb3J0IHsgU3R1ZGVudCB9IGZyb20gXCIuL1N0dWRlbnRcIlxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gXCIuL1R5cGVzXCJcblxuZXhwb3J0IGNsYXNzIENvdXJzZSB7XG4gIGlkOiBzdHJpbmdcbiAgc3ViamVjdDogU3ViamVjdFxuICBzdHVkZW50czogU3R1ZGVudFtdXG4gIHRlYWNoZXI6IFRlYWNoZXJcbiAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgc3ViamVjdDogU3ViamVjdCwgc3R1ZGVudHM6IFN0dWRlbnRbXSwgdGVhY2hlcjogVGVhY2hlcikge1xuICAgIHRoaXMuaWQgPSBpZFxuICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3RcbiAgICB0aGlzLnN0dWRlbnRzID0gc3R1ZGVudHNcbiAgICB0aGlzLnRlYWNoZXIgPSB0ZWFjaGVyXG5cbiAgICAvLyBjb25zb2xlLmxvZyhcInRoaXNcIiwgdGhpcy5zdWJqZWN0KVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICAvLyB0aGlzLnRlYWNoZXIuc3ViamVjdHMucHVzaCh0aGlzKVxuICAgIHRoaXMudGVhY2hlci5zdWJqZWN0cy5wdXNoKHRoaXMuc3ViamVjdClcbiAgICAvLyB0aGlzLnN0dWRlbnRzLmZvckVhY2goc3R1ZGVudCA9PiB7XG4gICAgLy8gICBzdHVkZW50LmNvdXJzZXMucHVzaCh0aGlzKVxuICAgIC8vIH0pXG4gIH1cblxuICBhZGRTdHVkZW50KHN0dWRlbnQ6IFN0dWRlbnQpIHtcbiAgICB0aGlzLnN0dWRlbnRzLnB1c2goc3R1ZGVudClcbiAgICBzdHVkZW50LmNvdXJzZXMucHVzaCh0aGlzKVxuICB9XG5cbiAgcmVtb3ZlU3R1ZGVudChzdHVkZW50SUQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc3R1ZGVudHMgPSB0aGlzLnN0dWRlbnRzLmZpbHRlcihzdHVkZW50ID0+IHN0dWRlbnQuaWQgIT09IHN0dWRlbnRJRClcbiAgfVxuICBnZXRTdHVkZW50KHN0dWRlbnRJRDogc3RyaW5nKTogU3R1ZGVudCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3Qgc3R1ZGVudCA9IHRoaXMuc3R1ZGVudHMuZmluZChzdHVkZW50ID0+IHN0dWRlbnQuaWQgPT09IHN0dWRlbnRJRClcbiAgICByZXR1cm4gc3R1ZGVudCAmJiBzdHVkZW50XG4gIH1cbiAgdXBkYXRlU3R1ZGVudChzdHVkZW50OiBTdHVkZW50KTogdm9pZCB7fVxufVxuIiwiZXhwb3J0IGNsYXNzIFBlcnNvbiB7XG4gIGlkOiBzdHJpbmdcbiAgZmlyc3ROYW1lOiBzdHJpbmdcbiAgbGFzdE5hbWU6IHN0cmluZ1xuXG4gIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIGZpcnN0TmFtZTogc3RyaW5nLCBsYXN0TmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5pZCA9IGlkXG4gICAgdGhpcy5maXJzdE5hbWUgPSBmaXJzdE5hbWVcbiAgICB0aGlzLmxhc3ROYW1lID0gbGFzdE5hbWVcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGVyc29uIH0gZnJvbSBcIi4vUGVyc29uXCJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tIFwiLi9UeXBlc1wiXG5cbmV4cG9ydCBjbGFzcyBUZWFjaGVyIGV4dGVuZHMgUGVyc29uIHtcbiAgc3ViamVjdHM6IFN1YmplY3RbXVxuXG4gIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIGZpcnN0TmFtZTogc3RyaW5nLCBsYXN0TmFtZTogc3RyaW5nLCBzdWJqZWN0czogU3ViamVjdFtdKSB7XG4gICAgc3VwZXIoaWQsIGZpcnN0TmFtZSwgbGFzdE5hbWUpXG4gICAgdGhpcy5zdWJqZWN0cyA9IHN1YmplY3RzXG4gIH1cbn1cbiIsImltcG9ydCB7IENvdXJzZSB9IGZyb20gXCIuL0NvdXJzZVwiXG5pbXBvcnQgeyBQZXJzb24gfSBmcm9tIFwiLi9QZXJzb25cIlxuXG5leHBvcnQgY2xhc3MgU3R1ZGVudCBleHRlbmRzIFBlcnNvbiB7XG4gIGNvdXJzZXM6IENvdXJzZVtdXG5cbiAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgZmlyc3ROYW1lOiBzdHJpbmcsIGxhc3ROYW1lOiBzdHJpbmcsIGNvdXJzZXM6IENvdXJzZVtdKSB7XG4gICAgc3VwZXIoaWQsIGZpcnN0TmFtZSwgbGFzdE5hbWUpXG4gICAgdGhpcy5jb3Vyc2VzID0gY291cnNlc1xuICB9XG59XG4iLCJpbXBvcnQgeyBTdHVkZW50IH0gZnJvbSBcIi4uL2RhdGEvU3R1ZGVudFwiXG5pbXBvcnQgeyBDb3Vyc2UgfSBmcm9tIFwiLi4vZGF0YS9Db3Vyc2VcIlxuaW1wb3J0IHsgVGVhY2hlciB9IGZyb20gXCIuLi9kYXRhL1RlYWNoZXJcIlxuXG5leHBvcnQgY2xhc3MgVmlldyB7XG4gIG1haW46IEhUTUxEaXZFbGVtZW50XG4gIHdyYXBwZXI6IEhUTUxEaXZFbGVtZW50XG4gIHRpdGxlOiBIVE1MSGVhZEVsZW1lbnRcbiAgbW9kYWxXcmFwcGVyOiBIVE1MRGl2RWxlbWVudFxuICBtb2RhbEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnRcbiAgc3R1ZGVudHM6IFN0dWRlbnRbXVxuICBjb3Vyc2VzOiBDb3Vyc2VbXVxuICB0ZWFjaGVyczogVGVhY2hlcltdXG4gIHN0dWRlbnRMaXN0OiBIVE1MVUxpc3RFbGVtZW50XG4gIHRlYWNoZXJzTGlzdDogSFRNTFVMaXN0RWxlbWVudFxuICBjb3Vyc2VzTGlzdDogSFRNTFVMaXN0RWxlbWVudFxuXG4gIGNvbnN0cnVjdG9yKHN0dWRlbnRzOiBTdHVkZW50W10sIGNvdXJzZXM6IENvdXJzZVtdLCB0ZWFjaGVyczogVGVhY2hlcltdKSB7XG4gICAgdGhpcy5zdHVkZW50cyA9IHN0dWRlbnRzXG4gICAgdGhpcy5jb3Vyc2VzID0gY291cnNlc1xuICAgIHRoaXMudGVhY2hlcnMgPSB0ZWFjaGVyc1xuXG4gICAgdGhpcy5tYWluID0gdGhpcy5nZXRFbGVtZW50KFwiI3Jvb3RcIikgYXMgSFRNTERpdkVsZW1lbnRcbiAgICB0aGlzLndyYXBwZXIgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJ3cmFwcGVyXCIpIGFzIEhUTUxEaXZFbGVtZW50XG5cbiAgICB0aGlzLnRpdGxlID0gdGhpcy5jcmVhdGVFbGVtZW50KFwiaDFcIiwgXCJtYWluLXRpdGxlXCIpIGFzIEhUTUxIZWFkRWxlbWVudFxuICAgIHRoaXMudGl0bGUudGV4dENvbnRlbnQgPSBcIldlc0NvYXN0XCJcblxuICAgIHRoaXMubW9kYWxCdXR0b24gPSB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgXCJtb2RhbC1idG5cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnRcbiAgICB0aGlzLm1vZGFsQnV0dG9uLnRleHRDb250ZW50ID0gXCJzaG93IGRhdGFcIlxuICAgIHRoaXMubW9kYWxXcmFwcGVyID0gdGhpcy5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwibW9kYWwtd3JhcHBlclwiKSBhcyBIVE1MRGl2RWxlbWVudFxuXG4gICAgdGhpcy5jb3Vyc2VzTGlzdCA9IHRoaXMuY3JlYXRlRWxlbWVudChcInVsXCIsIFwiY291cnNlcy1saXN0XCIpIGFzIEhUTUxVTGlzdEVsZW1lbnRcbiAgICB0aGlzLnN0dWRlbnRMaXN0ID0gdGhpcy5jcmVhdGVFbGVtZW50KFwidWxcIiwgXCJzdHVkZW50cy1saXN0XCIpIGFzIEhUTUxVTGlzdEVsZW1lbnRcbiAgICB0aGlzLnRlYWNoZXJzTGlzdCA9IHRoaXMuY3JlYXRlRWxlbWVudChcInVsXCIsIFwidGVhY2hhZXJzLWxpc3RcIikgYXMgSFRNTFVMaXN0RWxlbWVudFxuICAgIHRoaXMuY291cnNlc0xpc3QuY2xhc3NMaXN0LmFkZChcImhpZGVcIilcbiAgICB0aGlzLnRlYWNoZXJzTGlzdC5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKVxuICAgIHRoaXMuc3R1ZGVudExpc3QuY2xhc3NMaXN0LmFkZChcImhpZGVcIilcblxuICAgIHRoaXMud3JhcHBlci5hcHBlbmQoXG4gICAgICB0aGlzLnRpdGxlLFxuICAgICAgdGhpcy5tb2RhbEJ1dHRvbixcbiAgICAgIHRoaXMuY291cnNlc0xpc3QsXG4gICAgICB0aGlzLnN0dWRlbnRMaXN0LFxuICAgICAgdGhpcy50ZWFjaGVyc0xpc3RcbiAgICApXG5cbiAgICB0aGlzLm1haW4uYXBwZW5kKHRoaXMud3JhcHBlcilcbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnQodGFnOiBzdHJpbmcsIGNsYXNzTmFtZTogc3RyaW5nID0gXCJcIikge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZylcbiAgICBpZiAoY2xhc3NOYW1lKSBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxuXG4gICAgcmV0dXJuIGVsZW1lbnRcbiAgfVxuXG4gIGdldEVsZW1lbnQoc2VsZWN0b3I6IHN0cmluZykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKVxuXG4gICAgcmV0dXJuIGVsZW1lbnRcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyU3R1ZGVudHMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zdHVkZW50c1xuICAgICAgLm1hcChcbiAgICAgICAgc3R1ZGVudCA9PlxuICAgICAgICAgIGBcbiAgICAgICAgPGxpIGNsYXNzPVwic3R1ZGVudFwiPiR7c3R1ZGVudC5maXJzdE5hbWV9LSR7c3R1ZGVudC5sYXN0TmFtZX08L2xpPlxuICAgICAgICA8cD4ke3N0dWRlbnQuZmlyc3ROYW1lfSBjdXJyZW50bHkgc3R1ZHk6PC9wPlxuICAgICAgICAke3N0dWRlbnQuY291cnNlcy5tYXAoKGNvdXJzZTogQ291cnNlKSA9PiBgPGxpPiR7Y291cnNlLnN1YmplY3R9PC9saT5gKS5qb2luKFwiXCIpfVxuICAgICAgYFxuICAgICAgKVxuICAgICAgLmpvaW4oXCJcIilcbiAgfVxuICBwcml2YXRlIHJlbmRlclRlYWNoZXJzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudGVhY2hlcnNcbiAgICAgIC5tYXAoXG4gICAgICAgIHRlYWNoZXIgPT5cbiAgICAgICAgICBgXG4gICAgICAgIDxsaT4ke3RlYWNoZXIuZmlyc3ROYW1lfS0ke3RlYWNoZXIubGFzdE5hbWV9PC9saT5cbiAgICAgIGBcbiAgICAgIClcbiAgICAgIC5qb2luKFwiXCIpXG4gIH1cbiAgcHJpdmF0ZSByZW5kZXJDb3Vyc2VzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY291cnNlc1xuICAgICAgLm1hcChcbiAgICAgICAgY291cnNlID0+XG4gICAgICAgICAgYFxuICAgICAgICA8bGkgY2xhc3M9XCJjb3Vyc2VcIj4ke2NvdXJzZS5zdWJqZWN0fTwvbGk+XG4gICAgICAgIDxwPlN0dWRlbnRzIHRoYXQgcmVhZCAke2NvdXJzZS5zdWJqZWN0fTwvcD5cbiAgICAgICAgJHtjb3Vyc2Uuc3R1ZGVudHNcbiAgICAgICAgICAubWFwKChzdHVkZW50OiBTdHVkZW50KSA9PiBgPGxpPiR7c3R1ZGVudC5maXJzdE5hbWV9LSAke3N0dWRlbnQubGFzdE5hbWV9IDwvbGk+YClcbiAgICAgICAgICAuam9pbihcIlwiKX1cbiAgICAgIGBcbiAgICAgIClcbiAgICAgIC5qb2luKFwiXCIpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5zdHVkZW50TGlzdC5pbm5lckhUTUwgPSBgXG4gICAgICA8bGkgY2xhc3M9XCJ0aXRsZVwiPiA8c3Ryb25nPiBTdHVkZW50IExpc3QgPC9zdHJvbmc+IDwvbGk+XG4gICAgICAke3RoaXMucmVuZGVyU3R1ZGVudHMoKX1cbiAgICBgXG5cbiAgICB0aGlzLnRlYWNoZXJzTGlzdC5pbm5lckhUTUwgPSBgXG4gICAgPGxpIGNsYXNzPVwidGl0bGVcIj4gPHN0cm9uZz5UZWFjaGVycyBMaXN0PC9zdHJvbmc+IDwvbGk+XG4gICAgICAke3RoaXMucmVuZGVyVGVhY2hlcnMoKX1cbiAgICBgXG4gICAgdGhpcy5jb3Vyc2VzTGlzdC5pbm5lckhUTUwgPSBgXG4gICAgPGxpIGNsYXNzPVwidGl0bGVcIj4gPHN0cm9uZz5Db3Vyc2VzIExpc3Q8L3N0cm9uZz4gPC9saT5cbiAgICAgICR7dGhpcy5yZW5kZXJDb3Vyc2VzKCl9XG4gICAgYFxuICAgIHRoaXMubW9kYWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuc3R1ZGVudExpc3QuY2xhc3NMaXN0LnRvZ2dsZShcInNob3dcIilcbiAgICAgIHRoaXMuY291cnNlc0xpc3QuY2xhc3NMaXN0LnRvZ2dsZShcInNob3dcIilcbiAgICAgIHRoaXMudGVhY2hlcnNMaXN0LmNsYXNzTGlzdC50b2dnbGUoXCJzaG93XCIpXG4gICAgfSlcbiAgfVxufVxuIiwiLy8gVGhpcyBmaWxlIHJlcGxhY2VzIGBpbmRleC5qc2AgaW4gYnVuZGxlcnMgbGlrZSB3ZWJwYWNrIG9yIFJvbGx1cCxcbi8vIGFjY29yZGluZyB0byBgYnJvd3NlcmAgY29uZmlnIGluIGBwYWNrYWdlLmpzb25gLlxuXG5pbXBvcnQgeyB1cmxBbHBoYWJldCB9IGZyb20gJy4vdXJsLWFscGhhYmV0L2luZGV4LmpzJ1xuXG5pZiAoZmFsc2UpIHtcbiAgLy8gQWxsIGJ1bmRsZXJzIHdpbGwgcmVtb3ZlIHRoaXMgYmxvY2sgaW4gdGhlIHByb2R1Y3Rpb24gYnVuZGxlLlxuICBpZiAoXG4gICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyAmJlxuICAgIHR5cGVvZiBjcnlwdG8gPT09ICd1bmRlZmluZWQnXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdSZWFjdCBOYXRpdmUgZG9lcyBub3QgaGF2ZSBhIGJ1aWx0LWluIHNlY3VyZSByYW5kb20gZ2VuZXJhdG9yLiAnICtcbiAgICAgICAgJ0lmIHlvdSBkb27igJl0IG5lZWQgdW5wcmVkaWN0YWJsZSBJRHMgdXNlIGBuYW5vaWQvbm9uLXNlY3VyZWAuICcgK1xuICAgICAgICAnRm9yIHNlY3VyZSBJRHMsIGltcG9ydCBgcmVhY3QtbmF0aXZlLWdldC1yYW5kb20tdmFsdWVzYCAnICtcbiAgICAgICAgJ2JlZm9yZSBOYW5vIElELiBJZiB5b3UgdXNlIEV4cG8sIGluc3RhbGwgYGV4cG8tcmFuZG9tYCAnICtcbiAgICAgICAgJ2FuZCB1c2UgYG5hbm9pZC9hc3luY2AuJ1xuICAgIClcbiAgfVxuICBpZiAodHlwZW9mIG1zQ3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY3J5cHRvID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdJbXBvcnQgZmlsZSB3aXRoIGBpZiAoIXdpbmRvdy5jcnlwdG8pIHdpbmRvdy5jcnlwdG8gPSB3aW5kb3cubXNDcnlwdG9gJyArXG4gICAgICAgICcgYmVmb3JlIGltcG9ydGluZyBOYW5vIElEIHRvIGZpeCBJRSAxMSBzdXBwb3J0J1xuICAgIClcbiAgfVxuICBpZiAodHlwZW9mIGNyeXB0byA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnWW91ciBicm93c2VyIGRvZXMgbm90IGhhdmUgc2VjdXJlIHJhbmRvbSBnZW5lcmF0b3IuICcgK1xuICAgICAgICAnSWYgeW91IGRvbuKAmXQgbmVlZCB1bnByZWRpY3RhYmxlIElEcywgeW91IGNhbiB1c2UgbmFub2lkL25vbi1zZWN1cmUuJ1xuICAgIClcbiAgfVxufVxuXG5sZXQgcmFuZG9tID0gYnl0ZXMgPT4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShieXRlcykpXG5cbmxldCBjdXN0b21SYW5kb20gPSAoYWxwaGFiZXQsIHNpemUsIGdldFJhbmRvbSkgPT4ge1xuICAvLyBGaXJzdCwgYSBiaXRtYXNrIGlzIG5lY2Vzc2FyeSB0byBnZW5lcmF0ZSB0aGUgSUQuIFRoZSBiaXRtYXNrIG1ha2VzIGJ5dGVzXG4gIC8vIHZhbHVlcyBjbG9zZXIgdG8gdGhlIGFscGhhYmV0IHNpemUuIFRoZSBiaXRtYXNrIGNhbGN1bGF0ZXMgdGhlIGNsb3Nlc3RcbiAgLy8gYDJeMzEgLSAxYCBudW1iZXIsIHdoaWNoIGV4Y2VlZHMgdGhlIGFscGhhYmV0IHNpemUuXG4gIC8vIEZvciBleGFtcGxlLCB0aGUgYml0bWFzayBmb3IgdGhlIGFscGhhYmV0IHNpemUgMzAgaXMgMzEgKDAwMDExMTExKS5cbiAgLy8gYE1hdGguY2x6MzJgIGlzIG5vdCB1c2VkLCBiZWNhdXNlIGl0IGlzIG5vdCBhdmFpbGFibGUgaW4gYnJvd3NlcnMuXG4gIGxldCBtYXNrID0gKDIgPDwgKE1hdGgubG9nKGFscGhhYmV0Lmxlbmd0aCAtIDEpIC8gTWF0aC5MTjIpKSAtIDFcbiAgLy8gVGhvdWdoLCB0aGUgYml0bWFzayBzb2x1dGlvbiBpcyBub3QgcGVyZmVjdCBzaW5jZSB0aGUgYnl0ZXMgZXhjZWVkaW5nXG4gIC8vIHRoZSBhbHBoYWJldCBzaXplIGFyZSByZWZ1c2VkLiBUaGVyZWZvcmUsIHRvIHJlbGlhYmx5IGdlbmVyYXRlIHRoZSBJRCxcbiAgLy8gdGhlIHJhbmRvbSBieXRlcyByZWR1bmRhbmN5IGhhcyB0byBiZSBzYXRpc2ZpZWQuXG5cbiAgLy8gTm90ZTogZXZlcnkgaGFyZHdhcmUgcmFuZG9tIGdlbmVyYXRvciBjYWxsIGlzIHBlcmZvcm1hbmNlIGV4cGVuc2l2ZSxcbiAgLy8gYmVjYXVzZSB0aGUgc3lzdGVtIGNhbGwgZm9yIGVudHJvcHkgY29sbGVjdGlvbiB0YWtlcyBhIGxvdCBvZiB0aW1lLlxuICAvLyBTbywgdG8gYXZvaWQgYWRkaXRpb25hbCBzeXN0ZW0gY2FsbHMsIGV4dHJhIGJ5dGVzIGFyZSByZXF1ZXN0ZWQgaW4gYWR2YW5jZS5cblxuICAvLyBOZXh0LCBhIHN0ZXAgZGV0ZXJtaW5lcyBob3cgbWFueSByYW5kb20gYnl0ZXMgdG8gZ2VuZXJhdGUuXG4gIC8vIFRoZSBudW1iZXIgb2YgcmFuZG9tIGJ5dGVzIGdldHMgZGVjaWRlZCB1cG9uIHRoZSBJRCBzaXplLCBtYXNrLFxuICAvLyBhbHBoYWJldCBzaXplLCBhbmQgbWFnaWMgbnVtYmVyIDEuNiAodXNpbmcgMS42IHBlYWtzIGF0IHBlcmZvcm1hbmNlXG4gIC8vIGFjY29yZGluZyB0byBiZW5jaG1hcmtzKS5cblxuICAvLyBgLX5mID0+IE1hdGguY2VpbChmKWAgaWYgZiBpcyBhIGZsb2F0XG4gIC8vIGAtfmkgPT4gaSArIDFgIGlmIGkgaXMgYW4gaW50ZWdlclxuICBsZXQgc3RlcCA9IC1+KCgxLjYgKiBtYXNrICogc2l6ZSkgLyBhbHBoYWJldC5sZW5ndGgpXG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBsZXQgaWQgPSAnJ1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgYnl0ZXMgPSBnZXRSYW5kb20oc3RlcClcbiAgICAgIC8vIEEgY29tcGFjdCBhbHRlcm5hdGl2ZSBmb3IgYGZvciAodmFyIGkgPSAwOyBpIDwgc3RlcDsgaSsrKWAuXG4gICAgICBsZXQgaiA9IHN0ZXBcbiAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgLy8gQWRkaW5nIGB8fCAnJ2AgcmVmdXNlcyBhIHJhbmRvbSBieXRlIHRoYXQgZXhjZWVkcyB0aGUgYWxwaGFiZXQgc2l6ZS5cbiAgICAgICAgaWQgKz0gYWxwaGFiZXRbYnl0ZXNbal0gJiBtYXNrXSB8fCAnJ1xuICAgICAgICAvLyBgaWQubGVuZ3RoICsgMSA9PT0gc2l6ZWAgaXMgYSBtb3JlIGNvbXBhY3Qgb3B0aW9uLlxuICAgICAgICBpZiAoaWQubGVuZ3RoID09PSArc2l6ZSkgcmV0dXJuIGlkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmxldCBjdXN0b21BbHBoYWJldCA9IChhbHBoYWJldCwgc2l6ZSkgPT4gY3VzdG9tUmFuZG9tKGFscGhhYmV0LCBzaXplLCByYW5kb20pXG5cbmxldCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gIGxldCBpZCA9ICcnXG4gIGxldCBieXRlcyA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSkpXG5cbiAgLy8gQSBjb21wYWN0IGFsdGVybmF0aXZlIGZvciBgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGVwOyBpKyspYC5cbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIC8vIEl0IGlzIGluY29ycmVjdCB0byB1c2UgYnl0ZXMgZXhjZWVkaW5nIHRoZSBhbHBoYWJldCBzaXplLlxuICAgIC8vIFRoZSBmb2xsb3dpbmcgbWFzayByZWR1Y2VzIHRoZSByYW5kb20gYnl0ZSBpbiB0aGUgMC0yNTUgdmFsdWVcbiAgICAvLyByYW5nZSB0byB0aGUgMC02MyB2YWx1ZSByYW5nZS4gVGhlcmVmb3JlLCBhZGRpbmcgaGFja3MsIHN1Y2hcbiAgICAvLyBhcyBlbXB0eSBzdHJpbmcgZmFsbGJhY2sgb3IgbWFnaWMgbnVtYmVycywgaXMgdW5uZWNjZXNzYXJ5IGJlY2F1c2VcbiAgICAvLyB0aGUgYml0bWFzayB0cmltcyBieXRlcyBkb3duIHRvIHRoZSBhbHBoYWJldCBzaXplLlxuICAgIGxldCBieXRlID0gYnl0ZXNbc2l6ZV0gJiA2M1xuICAgIGlmIChieXRlIDwgMzYpIHtcbiAgICAgIC8vIGAwLTlhLXpgXG4gICAgICBpZCArPSBieXRlLnRvU3RyaW5nKDM2KVxuICAgIH0gZWxzZSBpZiAoYnl0ZSA8IDYyKSB7XG4gICAgICAvLyBgQS1aYFxuICAgICAgaWQgKz0gKGJ5dGUgLSAyNikudG9TdHJpbmcoMzYpLnRvVXBwZXJDYXNlKClcbiAgICB9IGVsc2UgaWYgKGJ5dGUgPCA2Mykge1xuICAgICAgaWQgKz0gJ18nXG4gICAgfSBlbHNlIHtcbiAgICAgIGlkICs9ICctJ1xuICAgIH1cbiAgfVxuICByZXR1cm4gaWRcbn1cblxuZXhwb3J0IHsgbmFub2lkLCBjdXN0b21BbHBoYWJldCwgY3VzdG9tUmFuZG9tLCB1cmxBbHBoYWJldCwgcmFuZG9tIH1cbiIsImltcG9ydCB7IENvdXJzZSB9IGZyb20gXCIuL3NjaG9vbC9kYXRhL0NvdXJzZVwiXG5pbXBvcnQgeyBUZWFjaGVyIH0gZnJvbSBcIi4vc2Nob29sL2RhdGEvVGVhY2hlclwiXG5pbXBvcnQgeyBTdHVkZW50IH0gZnJvbSBcIi4vc2Nob29sL2RhdGEvU3R1ZGVudFwiXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIi4vc2Nob29sL3ZpZXcvVmlld1wiXG5cbmltcG9ydCB7IG5hbm9pZCB9IGZyb20gXCJuYW5vaWRcIlxuOygoKSA9PiB7XG4gIGZ1bmN0aW9uIGNvbnRyb2xsZXIoKSB7XG4gICAgY29uc3QgbWlrZSA9IG5ldyBTdHVkZW50KG5hbm9pZCgpLCBcIk1pa2VcIiwgXCJTenlta293aWFrXCIsIFtdKVxuICAgIGNvbnN0IGpvbiA9IG5ldyBTdHVkZW50KG5hbm9pZCgpLCBcIkpvblwiLCBcIlNtaXRoXCIsIFtdKVxuICAgIGNvbnN0IGNsYXJhID0gbmV3IFN0dWRlbnQobmFub2lkKCksIFwiQ2xhcmFcIiwgXCJTdGVuXCIsIFtdKVxuICAgIGNvbnN0IGtpbSA9IG5ldyBTdHVkZW50KG5hbm9pZCgpLCBcIktpbVwiLCBcIkthbGxzdHJvbVwiLCBbXSlcbiAgICBjb25zdCBzdGluYSA9IG5ldyBTdHVkZW50KG5hbm9pZCgpLCBcIlN0aW5hXCIsIFwiVHVybmVyXCIsIFtdKVxuXG4gICAgY29uc3QgYm9yaXMgPSBuZXcgVGVhY2hlcihuYW5vaWQoKSwgXCJCb3Jpc1wiLCBcIkVpbnN0ZWluXCIsIFtdKVxuICAgIGNvbnN0IGxpbmRhID0gbmV3IFRlYWNoZXIobmFub2lkKCksIFwiTGluZGFcIiwgXCJTbWl0aFwiLCBbXSlcbiAgICBjb25zdCBtaWEgPSBuZXcgVGVhY2hlcihuYW5vaWQoKSwgXCJNaWFcIiwgXCJKb25zb25cIiwgW10pXG5cbiAgICBjb25zdCBtYXRoID0gbmV3IENvdXJzZShuYW5vaWQoKSwgXCJtYXRoXCIsIFtdLCBib3JpcylcbiAgICBjb25zdCBlbmdsaXNoID0gbmV3IENvdXJzZShuYW5vaWQoKSwgXCJlbmdsaXNoXCIsIFtdLCBsaW5kYSlcbiAgICBjb25zdCBzd2VkaXNoID0gbmV3IENvdXJzZShuYW5vaWQoKSwgXCJzd2VkaXNoXCIsIFtdLCBtaWEpXG4gICAgY29uc3QgaGlzdG9yeSA9IG5ldyBDb3Vyc2UobmFub2lkKCksIFwiaGlzdG9yeVwiLCBbXSwgYm9yaXMpXG5cbiAgICBtYXRoLmFkZFN0dWRlbnQobWlrZSlcbiAgICBtYXRoLmFkZFN0dWRlbnQoam9uKVxuICAgIGVuZ2xpc2guYWRkU3R1ZGVudChjbGFyYSlcbiAgICBlbmdsaXNoLmFkZFN0dWRlbnQoc3RpbmEpXG4gICAgc3dlZGlzaC5hZGRTdHVkZW50KGtpbSlcbiAgICBzd2VkaXNoLmFkZFN0dWRlbnQoc3RpbmEpXG5cbiAgICBjb25zdCBzdHVkZW50cyA9IFttaWtlLCBqb24sIGNsYXJhXVxuICAgIGNvbnN0IHRlYWNoZXJzID0gW2JvcmlzLCBsaW5kYSwgbWlhXVxuICAgIGNvbnN0IGNvdXJzZXMgPSBbbWF0aCwgZW5nbGlzaCwgc3dlZGlzaF1cblxuICAgIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgICBjb25zdCB2ID0gbmV3IFZpZXcoc3R1ZGVudHMsIGNvdXJzZXMsIHRlYWNoZXJzKVxuICAgICAgdi5yZW5kZXIoKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwiYm9yaXNcIiwgYm9yaXMpXG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXQsXG4gICAgfVxuICB9XG4gIGNvbnRyb2xsZXIoKS5pbml0KClcbn0pKClcbiJdLCJzb3VyY2VSb290IjoiIn0=